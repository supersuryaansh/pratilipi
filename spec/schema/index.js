// This file is autogenerated by the hyperschema compiler
// Schema Version: 2
/* eslint-disable camelcase */
/* eslint-disable quotes */

import { c } from 'hyperschema/runtime'

const VERSION = 2

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @pratilipi/db
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.key)
    c.buffer.preencode(state, m.value)
    state.end++ // max flag is 1 so always one byte
  },
  encode (state, m) {
    const flags = (version >= 2 && m.file) ? 1 : 0

    c.string.encode(state, m.key)
    c.buffer.encode(state, m.value)
    c.uint.encode(state, flags)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.buffer.decode(state)
    const flags = state.start < state.end ? c.uint.decode(state) : 0

    return {
      key: r0,
      value: r1,
      file: (version >= 2 && (flags & 1) !== 0)
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@pratilipi/db': return encoding0
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

export { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
